1. In your own words, explain what clean code is and why it is important.
Clean code is important because of readability, reusability, testing,
and understandability.

2. Read this article about Toyota and their use of bad code.
Although you may not yet understand all of the topics discussed,
think about another commonly used object that relies on computers
and explain what would happen if the code was not created
to an acceptable standard.

The first thing that comes to mind when I think of unacceptable code is
the Hawaiian Missile crisis in 2017. It took 38 minutes to announce that
it was a mistake. https://www.nytimes.com/2018/01/13/us/hawaii-missile.html

_______________________________________________________________________

3. Would you consider the following to be clean code?
Explain why or why not. If not, refactor the code.

I would not consider this clean code and I would refactor it because:
- I would rename the function
- change "F" and "C" to fahrenheit and celsius
- take out THEN and SET
- change 'to' to =

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

My refactor:

FUNCTION degree(x, y)
 IF y = fahrenheit
  z = (x−32) * (5/9)
 PRINT z
 ELSE IF y = celsius
  z = x * 1.8000 + 32.00
 PRINT z
 END IF
END FUNCTION

_______________________________________________________________________

4. Would you consider the following to be clean code?
Explain why or why not. If not, refactor the code.

I would consider this clean code because the naming, arguments,
and function are readable and understandable.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
  ELSE
   PRINT "Sorry, cannot divide by 0"
  END IF
 PRINT percentage
END FUNCTION

_______________________________________________________________________

5. Using pseudocode, refactor the code for the following examples using
the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a
customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

My refactor:

FUNCTION checkOutCustomer(paymentType)

   PRINT "Your total due is: " CALL totalDue with subTotal, discountRate

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - CALL totalDue with subTotal, discountRate

   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: CALL totalDue with subTotal, discountRate

   END IF
END FUNCTION

FUNCTION totalDue(subTotal, discountRate)
 PRINT subTotal * discountRate + (subTotal * tax)

END FUNCTION



b. The following function checks out a book if
there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF


 FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND NOT(guest.hasOverdueBooks) AND guest.outstandingFees = 0 THEN
     APPEND book to guest.books
     SET book.status to "Checked Out"
     PRINT "Your books have been issued."
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION


c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 Programming Questions
You may do the following problems in any language of your choice.
Use the clean code principles taught in this section while writing the code.

6. Square Given an array of integers, find out whether the sum
of the integers is a perfect square. If it is a perfect square,
return the square root, otherwise return the sum.

function perfectSquare(nums){
  const sum = nums.reduce((x,y) => x+y);
  const squareRoot = Math.sqrt(sum);
  return (squareRoot % 1 === 0 ? squareRoot:sum)
 }

 7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function findDuplicate(nums){
  for(let counter = 0; counter< nums.length; counter++){
    for(let innerCounter = counter; innerCounter< nums.length; innerCounter++){
      if (counter !== innerCounter && nums[counter]=== nums[innerCounter])
         {return true}
    }
  }
  return false
}
