1. What is a hash table?
A hash table is a data structure that is used to store keys/value pairs.

2. What is hashing?
Hashing is a technique that is used to uniquely identify a
specific object from a group of similar objects.

3. How does a hash table store data?
It uses a hash function to compute an index into an array in
which an element will be inserted or searched

4. How are hash tables and objects different?
Objects are used when the number of data entries are static. Hash tables
are used when data entries are variable.


5. Determine whether you would use a hash table or an object to
store each of the following pieces of data:

A list of pets and their unique names. Hash Table
The name, age, and the birthday of your best friend. Object
The name and location of every company in a given city. Hash Table
All of the books checked out from a library by a particular individual. Hash Table
The primary and secondary phone numbers for a contact. Object


6. Build a system that allows a sales associate to enter a customer's name,
address, and phone number into the system and look up customers using their phone
numbers. Store this information in a hash table. given a phone number, get name
address of a customer.

class Customer {
  constructor(name, address, phoneNumber) {
    this.name = name;
    this.address = address;
    this.phoneNumber = phoneNumber
  }
}

function getHashCode(person){
  return parseInt(person.phoneNumber);
}

function addCustomer(array, person){
    hashCode = getHashCode(person)
    let hashKey = hashCode % (array.length);
    array.splice(hashKey, 1, person);
}

function lookUpCustomer(phoneNumber){
  var customerIndex = parseInt(phoneNumber) % customerHashMap.length;
  return customerHashMap[customerIndex];
}

var customerHashMap = new Array(10);

var Justin = new Customer("Justin", "123 Address St", "7778889999")
var Jim = new Customer("Jim", "174 Address Ln", "1112223333")
var Sam = new Customer("Sam", "210 Address Ave", "2223334444")
var Monty = new Customer("Monty", "560 Address Dr", "5556667777")

addCustomer(customerHashMap, Justin);
addCustomer(customerHashMap, Jim);
addCustomer(customerHashMap, Sam);
addCustomer(customerHashMap, Monty);

function tests(number){
  for(let i = number; i > 0; i--){
    var phoneNumbers = ["7778889999","1112223333","2223334444","5556667777"]
    var randomPhoneNumber = phoneNumbers[Math.floor(Math.random()*phoneNumbers.length)];
    console.log(randomPhoneNumber, (lookUpCustomer(randomPhoneNumber)).name);
  }
}
tests(30);



7. Build a system that allows a store owner to track their store's
inventory using a hash table for storage.

class HashTable {
  constructor() {
     this.storage = [];
     this.maxStorage = 200;
  }

  hash(string, max) {
     let hash = 0;


     for (let i = 0; i < string.length; i++) {
        hash += string.charCodeAt(i);
     }
     return hash % max;


  }

     add(value) {
     var key = value.code;
     var index = this.hash(key, this.maxStorage);
     var inserted = false;

     if (this.storage[index] === undefined) {
        this.storage[index] = value;

     }
      else {


       for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
         storage[index][i][1] = value;
         inserted = true;
       }
     }
     if (inserted === false) {
       storage[index].push([value]);
     }
      }
     }
      lookup({code}) {
        let key = code;
        let index = this.hash(key, this.maxStorage);

        if(!this.storage[index]){
            return console.log('Not found');
        } else {

        return console.log(this.storage[index]);

        }
    }


}


var ht = new HashTable();
ht.add({code: 'kj154', product:'bread'});
ht.add({code: 'pl564', product:'milk'});
ht.add({code: 'bo156', product:'eggs'});


ht.lookup({code: 'kj154'});
ht.lookup({code: 'le423'});



8. Build a system that allows digital copies of newspapers to be entered and searched
by publisher and publication date. Use hash tables to store the necessary data.

class HashTable {
constructor() {
   this.storage = [];
   this.maxStorage = 200;
}

hash(string, max) {
   let hash = 0;


   for (let i = 0; i < string.length; i++) {
      hash += string.charCodeAt(i);
   }
   return hash % max;


}

   add(value) {
   var key = value.publisher + value.date;
   var index = this.hash(key, this.maxStorage);
   var inserted = false;

   if (this.storage[index] === undefined) {
      this.storage[index] = value;

   }
    else {


     for (var i = 0; i < storage[index].length; i++) {
      if (storage[index][i][0] === key) {
       storage[index][i][1] = value;
       inserted = true;
     }
   }
   if (inserted === false) {
     storage[index].push([value]);
   }
    }
   }
    lookup({publisher, date}) {
      let key = publisher + date;
      let index = this.hash(key, this.maxStorage);

      if(!this.storage[index]){
          return console.log('Not found');
      } else {

      return console.log(this.storage[index]);

      }
  }


}

var ht = new HashTable();
ht.add ({publisher: 'NY Times', date: '04-12-1999', headline: 'We Love Ny'});
ht.add( {publisher: 'SF Cronicle', date: '06-10-1985', headline: 'Rice-A-Roni is our Treat!'});
ht.add({publisher: 'Washington Post', date:'08-02-1977', headline: 'Best day Ever!'});


ht.lookup({publisher: 'NY Times', date: '04-12-1999'});
ht.lookup({publisher: 'SF Cronicle', date: '06-10-1985'});
ht.lookup({publisher: 'Wall Street Journal', date: '07-12-2010'});
