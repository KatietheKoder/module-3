1. Write out a generic SELECT statement.
SELECT column
FROM table
WHERE condition;

2. Create a fun way to remember the order of operations
in a SELECT statement, such as a mnemonic.

Sweaty
Feet
Will
Give
Horrible
Odors

3. Given this dogs table, write queries to
select the following pieces of data:

Intake teams typically guess the breed of shelter dogs, so the
breed column may have multiple words (for example, "Labrador Collie mix").

3a. Display the name, gender, and age of all dogs that are part Labrador.
SELECT name, gender, age
FROM dogs
WHERE breed LIKE '%labrador%';

3b. Display the ids of all dogs that are under 1 year old.
SELECT id
FROM dogs
WHERE age < 1;


3c. Display the name and age of all dogs that are female and over 35lbs.
SELECT name, age
FROM dogs
WHERE gender LIKE ‘F’ AND weight > 35;


3d. Display all of the information about all dogs that are not Shepherd mixes.
SELECT *
FROM dogs
WHERE breed NOT LIKE ‘%shepherd%’;


3e. Display the id, age, weight, and breed of all dogs that are either over 60lbs or Great Danes.
SELECT id, age, weight, breed
FROM dogs
WHERE weight > 60 OR breed LIKE ‘great dane’;


4. Given this cats table, what records are returned from these queries?

4a. SELECT name, adoption_date FROM cats;
name		adoption_date
'Mushi'		'2016-03-22'
'Seashell'	NULL
'Azul'		'2016-04-17'
'Victoire'	'2016-09-01’
'Nala'		NULL


4b. SELECT name, age FROM cats;
name		age
'Mushi’		1
'Seashell'	7
'Azul'		3
'Victoire'	7
'Nala'		1


5. From the cats table, write queries to select the following pieces of data.


5a. Display all the information about all of the available cats.
SELECT *
FROM cats;

5b. Display the name and sex of all cats who are 7 years old.
SELECT name, sex
FROM cats
WHERE age > 7;


5c. Find all of the names of the cats, so you don’t choose duplicate names for new cats.
SELECT name
FROM cats;

6. List each comparison operator and explain when you would use it. Include a real world example for each.
If you can’t list these from memory, do these flashcards until you can!

A. > - greater than - e.g. if you were looking for age greater than 30
B. < - less than - e.g. if you were looking for age less than 30
C. = - equal to - e.g. if you were looking for a match, such as age = 30
D. >= - greater than or equal to - if you were looking for people age 30 or older
E. <= - less than or equal to - if you were looking for people age 30 or younger
F. != - does not equal - if you were looking for every age BUT 30
G. <> - not equal - same as above
H. LIKE - when comparing a string e.g. LIKE ‘%cat%’;
I. BETWEEN - between two numbers, such as BETWEEN 4 and 10
J. IS DISTINCT FROM - used in place of <> when one of the values is null
K. IS NULL - when looking for a value that is empty - e.g. WHERE quantity IS NULL;
L. AND - when looking for two values - e.g. WHERE age > 50 AND name = ‘Bob’;
M. OR - when looking for all the values that meet one of two conditions - e.g. WHERE age > 50 OR name = ‘Bob’;
N. NOT - value must be false to return - WHERE title NOT LIKE ‘%The’;

7. From the cats table, what data is returned from these queries?
A. SELECT name FROM cats WHERE gender = ‘F’;
 name
'Seashell'
'Nala'

B. SELECT name FROM cats WHERE age <> 3;

name
'Mushi'
'Seashell'
'Victoire’
‘Nala'

C. SELECT ID FROM cats WHERE name != ‘Mushi’ AND gender = ‘M’;

id
3
4
